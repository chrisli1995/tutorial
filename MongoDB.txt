创建数据库：use 数据库名（当没有进行操作离开的时候会自动删除）
查看所有数据库：show dbs
给指定数据库添加集合和记录：db.集合名.insert({数据})
查看数据库中的集合：show collections 
查询指定文档的数据：db.文档名.find（）
                    db.文档名.findOne（）(查询第一条数据)
更新文档数据：db.文档名.update（{文档数据},{$set:{新文档数据}}）
删除文档的数据：db.文档名.remove({数据})不会删除集合和索引
---------------------------------------------------------------------------------------------------------------------------
删除数据库中的集合：db.文档名.drop()
删除数据库：db.dropDatabase()
shell的help：xx.help()
mongodb的API：都是英文...
构造函数：function insert(object){db.getCollection().insert(object)}之后可以直接运行代码
shell可以用eval
---------------------------------------------------------------------------------------------------------------------------
批量插入文档：想批量只能直接写方法如for(var i=o;i<10;i++){db.person.insert({name:i})} 
SAVE操作：当id相同的时候inert会报错 save不会
根据条件删除：db.文档名.remove({删除条件})
强制更新操作：db.文档名.update({文档数据},{新文档数据},ture or false,ture or false)（会替换到所有数据，不常用）
第三个地方，如果在后加ture的时候，当没有查找到要更新的位置，会直接变为插入数据，false则不会如此。
第四个地方，ture可以实现批量更新（需要修改器配置比如$set）
所有修改器包括：
               $set 对某一个键值进行修改，如果没有就添加 ex:db.person.update({_id:1},{$set:{name:"lwd"}})
               $inc 只使用于数值类型，对其进行加减操作 ex:db.person.update({_id:1},{$inc:{age:1}})
               $unset 删除某指定的键 ex:db.person.update({_id:1},{$unset{age:1}})
               $push 只使用于数组类型，在数组里面加值 ex:db.person.update({_id=1},{$push:{class:"1"}})
               $pushAll 只使用于数组类型，批量在数组价值 ex:db.person.update({_id=1},{$pullAll:class:["1","2","3"]})
               $addToSet 只使用于数组类型，当没有的时候才会进行操作 ex:db.person.update({_id=1},{$addToSet:{name:"lwd"}})
               $pop 只使用于数组，删除某一个元素-1为第一个 1为最后一个 ex:db.person.update({_id=1},{$pop:{name:1}})
               $pull 删除某一个元素 直接写要删除的东西 ex:db.person.update({_id=1},{$pull:{name:"lwd"}})
               $pullAll 一次性删除某元素 ex:db.person.update({_id:1},{$pullAll:{class:["1","2"]}})
               $addToSet与$each批量数组更新 ex: db.person.update({_id:1},{$adaToSet:{class:{$each:["1","2","3"]}}})
runCommand和findAndModify函数：ps=db.runConmmend({
                               "findAndModify":"person",
                               "query":{"name":"lwd"},
                               "update":{"$set":{"_id":"5"}},
                               "new":ture
                               }
                               ).value
---------------------------------------------------------------------------------------------------------------------------
指定返回的键：db.文档名.find({条件},{键指定}) 
条件中的比较操作符：$lt <          ex:{age:{$gte:22,$lte:27}}
                    $lte <=
                    $gt >
                    $gte >=
                    $ne !=         ex:{age:{$ne:26}}
                    $in和$nin 包含或不包含 只用于数组 ex:db.person.find({country:{$in:["CHINA","USA"]}},{_id:0,e:1,name:1}})  
$or or查询：ex db.person.find({$or:[{c:{$gt:85}},{e:{$gt90}}]},{_id:0,c:1,name:1}}) 
Null: ex db.person.find({sex:{$in:[null]}},{_id:0,c:1,name:1}}) 
正则查询：这里不做解释
$not:可用于任何时候 不单单是数组 ex:db.person.find({name:{$not:/li/i}},{_id:0,name:1,sex:1})
数组查询$all和index的应用：ex:db.person.find({books:{$all:["CHINA","USA"]}},{_id:0,e:1,name:1}})
                           ex:db.person.find({"books.1":"java"},{_id:0,e:1,name:1}})(喜欢的第二本书是Java的)
查询数组的指定长度$size ex:db.person.find({books:{$size:4}},{_id:0,e:1,name:1}})(这个无法跟其他操作符一起使用)
如果要跟其他查询器一起使用需要1.增加字段db.person.update({},{$set:{size:4}},false,ture)
                              2.改变更新方式db.person.update({name:"jim"},{$push:{books:"oracle"},$inc:{size:1}})
                              3.利用其他操作符直接查询size字段
利用shell查询：var jim=db.person.find({name:"jim"})
               while(persons.hasNext()){
               obj=person.next();
               print(obj.books.length);
               }
$slice返回文档指定数组的内部值：db.person.find({name:"jim"},{books:{$slice:[从数组第几个元素开始,查询几个]},_id:0})(直接写-1的话是默认显示数组最后一个元素)
文档查询*：最好是创建一个对象 ex:db.person.find({school:{$elemMatch:{school:"k",score:"a"}}})
$where查询：db.person.find("$where":function){用js写的方法}
limit查询：限制查询的条数 ex:db.person.find({school:{$elemMatch:{school:"k",score:"a"}}}).limit(5)
skip查询：返回指定的条数 ex:db.person.find({school:{$elemMatch:{school:"k",score:"a"}}}).limit(5).skip(5)(返回五到十条记录)
sort查询：按照指定的顺序排序 ex:db.person.find({school:{$elemMatch:{school:"k",score:"a"}}}).limit(5).skip(5).sort({name:1})
---------------------------------------------------------------------------------------------------------------------------
创建简单索引：1.先检验一下查询的性能
                var start=new Date()
                db.books.find({number:123456})
                var end=new Date()
                end-start
              2.创建索引                
                db.books.ensureIndex({number:1})
需要注意的地方：1.1是正序创建索引，-1倒序
                2.索引会影响插入的性能，所以对多查询少插入的文档去考虑索引
                3.符合索引需要注意索引的先后顺序
                4.索引不是越多越好
                5.可以提高排序的速度

索引的命名：db.books.ensureIndex({name:-1},{name:"bookname"})
唯一索引：解决键的不重复问题 db.books.ensureIndex({name:-1},{unique:ture})
          在唯一索引之前的数据 db.books.ensureIndex({name:-1},{unique:ture,dropDups:tue})
如何强制查询使用指定的索引：db.books.find({name:"1book",number:1}).hint({name:-1})
查询详细数据：db.books.find({name:"12book"}).explain()
查看索引：db.system.index/namespaces.find()
后台执行索引：db.books.ensureIndex({number:1},{background:ture})
删除索引：db.books.runCommand({dropindexs:"集合名",index:"索引名"})（换成*为批量索引）
db.map.find({gis:{$within:{$box:[[50,50],[190,190]]}}},{_id:0,gis:1})
创建2D索引：db.map.ensureIndex({gis:"2d"},{min:-1,max:201})
            $near 筛选出临近的值 ex:db.map.find({gis:{$near:[70,180]}},{_id:0,gis:1}).limit(3)
            在某个方形区域内的值:db.map.find({gis:{$within:{$box:[[50,50],[190,190]]}}},{_id:0,gis:1})（里面两个坐标为对角）
            以某个圆为区域的值：db.map.find({gis:{$within:{$box:[[50,50],[190,190]]}}},{_id:0,gis:1})（前面坐标为圆心，后面为半径）
---------------------------------------------------------------------------------------------------------------------------
查询数量count：db.person.find({country:"USA"}).conunt()
查询去除重复distinct:db.runCommand({distinct:"person",key:"country"}).values        
group的用法:db.runCommand({group:{
	    ns:集合名字,
	    key：分组的键对象,ex:{"country":ture}
	    Initial:初始化累加器,ex:m:0
   	    $reduce:组分解器,
        ex  function(doc,prev){
	    if(doc.m>prev.m){
		prev.m=doc.m;
		prev.name=doc.name;
		prev.country=doc.country;
	       }
             }
     	    condition:条件,ex {m:{$gt:90}}
	    finalize:组完成器(可以没有 但他可以修改显示)ex: prev.m=prev.name+"math scores"+prev.m
            }	
            })
命令执行器runCommand:db.runCommand({drop:"map"})
如何查询提供的命令：db.listCommands()(其实没什么用)
查询服务器版本号与主机操作系统：db.runCommand({buildinfo:1})
查询执行集合的详细信息，大小，空间和索引等：db.runCommand({collstats:"person"})
查询操作本集合的最后一次错误信息：db.runCommand({getLastError:"person"})
---------------------------------------------------------------------------------------------------------------------------
创建固定集合：db.createCollection("del_col2", {capped:true, size:1000, max:2}) 
把普通集合变为固定集合：db.runCommand("converToCapped":"person",size:1000)
如何设置反序排序：db.mycoll.find().sort({$})
服务器端运行eval：db.eval("function(name){return name}","uspcat")
把变量加载到特殊集合system.js中：db.system.js.insert({_id:name,value:"uspcat"})
调用：db.eval("return name;")
---------------------------------------------------------------------------------------------------------------------------
启动项：mongod --help
               --dbpath(指定数据库目录，默认在Windows下的c:\data\db\)
               --fork(用守护进程的方式启动mongodb)               
               --logpath(指定日志的输出路径，默认是控制台)
               --config(指定启动项用的文件路径)
               --auth(用安全认证方式启动数据库)
关闭数据库：Ctrl+c 或者 db.shutdownServer()
导出数据：mongoexport -d要导出的数据库
                      -c要导出的表
                      -o指定导出的文件名
                      -csv制定导出的csv格式
                      -q过滤导出
                      --type<json|csv|tsv>
ex:mongoexport -d test -c person -o 文件目录
导入数据：mongoimport --db test --collection person --file E:/mongobackup/person.json
导出数据库：mongodump --host 127.0.0.1:27017 -d test -o E:/mongobackup
恢复数据库：mongoresore --host 127.0.0.1:27017 -d test e:/mongobackup/test/test
---------------------------------------------------------------------------------------------------------------------------
上锁：db.runCommand({fsync:1,lock:1})
解锁：db.currentOp()
数据修复：db.repairDatabase()
添加用户：ex:为test添加用户user
             use test
             db.createUser({user: "root",pwd:"123456",customData:{name:"root"},roles[{role:"userAdminAnyDatabase",db:"test" }]})
             user字段，为新用户的名字；
             pwd字段，用户的密码；
             cusomData字段，为任意内容，例如可以为用户全名介绍；
             roles字段，指定用户的角色，可以用一个空数组给新用户设定空角色;在roles字段,可以指定内置角色和用户定义的角色。
			 
			 
将Excel表导入数据库：mongoimport --db test --collection t --type csv --headerline --file E:/qw.csv








